package com.jio.ipmlw.utils;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.SortedMap;
import java.util.TreeMap;

public class Test2 {
	private final List<String> nodes = new ArrayList<>();
	private final SortedMap<Long, String> hashRing = new TreeMap<>();

	private int VIRTUAL_NODES_PER_NODE = 10;

	public static void main(String[] args) throws ParseException {

		Test2 distCache = new Test2();
		List<String> nodeList = new ArrayList<>();
		nodeList.add("dumm");
		nodeList.add("tumm");
		distCache.updateHashRing(nodeList);
		
		
		System.out.println(distCache.getNodeForKey("cumm"));
	}
	
	public void updateHashRing(List<String> newNodes) {
		nodes.clear();
		hashRing.clear();

		nodes.addAll(newNodes);

		for (String newNode : nodes) {
			for (int i = 0; i < VIRTUAL_NODES_PER_NODE; i++) {
				long hash = getHash(newNode + "_" + i);
				hashRing.put(hash, newNode);
			}
		}
	}

	public long getHash(String key) {
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			byte[] bytes = md.digest(key.getBytes());

			long h = 0;
			for (int i = 0; i < 8; i++) {
				h = (h << 8) | bytes[i] & 0xFF;
			}

			return h;
		} catch (NoSuchAlgorithmException e) {
			throw new RuntimeException("SHA-256 not found", e);
		}
	}

	public String getNodeForKey(String key) {
		if (hashRing.isEmpty()) {
			throw new IllegalStateException("No cache nodes available.");
		}

		long keyHash = getHash(key);
		
		if(!hashRing.containsKey(keyHash)) {
			SortedMap<Long, String> tailMap = hashRing.tailMap(keyHash);
			keyHash = tailMap.isEmpty() ? hashRing.firstKey() : tailMap.firstKey();
		}

		return hashRing.get(keyHash);
	}

}
